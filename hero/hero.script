-- gravity pulling the player down in pixel units/sË†2
local gravity = -10
local jump_takeoff_speed = 500
local horizontal_movement_speed = 400
local direction_right = 1
local direction_left = -1


function init(self)
	-- this tells the engine to send input to on_input() in this script
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus")
	

	-- save the starting position
	self.position = go.get_position()

	-- keep track of movement vector and if there is ground contact
	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
	self.direction = 0
end

function final(self)
	-- Return input focus when the object is deleted
	msg.post(".", "release_input_focus")
	msg.post("camera", "release_camera_focus")
	
end

function play_animation(self, anim)
	if self.direction ~= 0 then
		sprite.set_hflip("#sprite", self.direction  ~= direction_right)
	end
	
	if self.current_anim ~= anim then
		msg.post("#sprite", "play_animation", { id = anim } )
		self.current_anim = anim
	end
end
	

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)
	local horizontal_movement = vmath.vector3(self.direction * horizontal_movement_speed, 0, 0)

	if not self.ground_contact then
		-- Apply gravity if there's no ground contact
		self.velocity = self.velocity + horizontal_movement + gravity
	else
		if horizontal_movement.x == 0 then
			play_animation(self,  hash("eggton_idle"))	
		else
			self.velocity = self.velocity + horizontal_movement
			play_animation(self,  hash("eggton_walk"))	
		end	
	end

	-- apply velocity to the player character
	go.set_position(go.get_position() + self.velocity * dt)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.direction = 0
	self.velocity.x = 0
	
end

local function handle_geometry_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- check if we received a contact point message. One message for each contact point
		if message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		end
	end
end

function on_input(self, action_id, action)
	
	if action_id == hash("hero_jump") then
		jump(self)
	elseif action_id == hash("hero_right") then
		self.direction = direction_right
	elseif action_id == hash("hero_left") then
		self.direction = direction_left
	end
end

function jump(self)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
	end
end
	